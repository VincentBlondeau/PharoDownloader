Class {
	#name : #PhLVirtualMachineManagerTest,
	#superclass : #TestCase,
	#category : #'PharoDownloader-Tests'
}

{ #category : #'as yet unclassified' }
PhLVirtualMachineManagerTest class >> availaibleVirtualMachines [
	Smalltalk vm imageVersionNumber
]

{ #category : #'expected results' }
PhLVirtualMachineManagerTest >> currentImageVersion [
	
	"This test must be rewritten to a controlable version not depending on current image version"
	self skip. 

	^ (SystemVersion current major = 6
		and: [ SystemVersion current highestUpdate >= 60509 ])
		ifTrue: [ '61' ]
		ifFalse: [ SystemVersion current major asString
				, SystemVersion current minor asString ]
]

{ #category : #utility }
PhLVirtualMachineManagerTest >> getImageHeader: anImageUrl [
	| archive image |
	archive := ZipArchive new 
		readFrom: (ZnEasy get: anImageUrl) contents readStream.
	image:= archive members detect: [ :each | each  fileName endsWith: '.image' ].
	^ ((image contentsFrom: 1 to: 4) collect: #asciiValue as: Array) readStream

]

{ #category : #tests }
PhLVirtualMachineManagerTest >> replaceOSByMacIn: url [
	^ (url copyReplaceAll: 'linux' with: 'mac') copyReplaceAll: 'win' with: 'mac'
]

{ #category : #'input data' }
PhLVirtualMachineManagerTest >> sixtyFourBitsHeader [
	" too long to process this request
		^ self getImageHeader: 'http://files.pharo.org/image/60/latest-64.zip'
	"	
	" Retrieved with:
		'pharo64.image' asFileReference binaryReadStream next: 20
	"
	
	^ #[181 9 1 0 128 0 0 0 112 37 248 2 0 0 0 0 0 64 128 0] readStream "truncated image file"
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testCanDetect32BitsImage [
	| version |
	self timeLimit: 60 seconds.
	version := PhDVirtualMachineManager imageFormatNumberFromStream: self thirtyTwoBitsHeader.
	self assert: (PhDVirtualMachineManager is32bits: version)
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testCanDetect64BitsImage [
	| version |
	self timeLimit: 60 seconds.
	version := PhDVirtualMachineManager imageFormatNumberFromStream: self sixtyFourBitsHeader.
	self assert: (PhDVirtualMachineManager is64bits: version)
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testCanGetImageFormatNumber [
	| version |
	version := PhDVirtualMachineManager imageFormatNumberFromFile: Smalltalk image lastImagePath.
		
	self assert: version isInteger.
	self
		assert: version
		equals: Smalltalk imageFormatVersion
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testCanGetImageVersionFromFile [
	| vmManager |
	vmManager := PhDVirtualMachineManager forImage: Smalltalk image lastImagePath.
	vmManager imageVersionFile writeStreamDo: [ :stream | stream << '60' ].
		
	self
		assert: vmManager imageVersionFromFile
		equals: '60'
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testGetExceptionWhenRunningImageVersionFromFileWhenFileIsAbsent [
	| vmManager |
	vmManager := PhDVirtualMachineManager forImage: Smalltalk image lastImagePath.
	vmManager imageVersionFile ensureDelete.
		
	self
		should: [ vmManager imageVersionFromFile ]
		raise: PhDImageVersionDeterminationError 
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testPharo50PreSpurImageUrlIsCorrect [
	| url |
	url := PhDVirtualMachineManager new
		imageFormatNumber: PhDVirtualMachineManager imageFormatPreSpur;
		imageVersion: '50';
		vmUrl.
	self assert: (self replaceOSByMacIn: url) equals: 'https://files.pharo.org/get-files/50-preSpur/pharo-mac-stable.zip'
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testPharo60VmUrlIsCorrect [
	| url |
	url := PhDVirtualMachineManager new
		imageFormatNumber: PhDVirtualMachineManager imageFormat32bits;
		imageVersion: '60';
		vmUrl.
	self assert: (self replaceOSByMacIn: url) equals: 'https://files.pharo.org/get-files/60/pharo-mac-stable.zip'
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testPharo70Vm64BitsUrlIsCorrect [
	| url |
	url := (PhDVirtualMachineManager new 
		imageFormatNumber: PhDVirtualMachineManager imageFormat64bits;
		imageVersion: '70';
		vmUrl).
	self 
		assert: (self replaceOSByMacIn: url)
		equals: 'https://files.pharo.org/get-files/70/pharo64-mac-stable.zip' 
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testPharo70VmUrlIsCorrect [
	| url |
	url := (PhDVirtualMachineManager new 
		imageFormatNumber: PhDVirtualMachineManager imageFormat32bits;
		imageVersion: '70';
		vmUrl).
	self 
		assert: (self replaceOSByMacIn: url)
		equals: 'https://files.pharo.org/get-files/70/pharo-mac-stable.zip' 
]

{ #category : #tests }
PhLVirtualMachineManagerTest >> testPreSpurImageUrlIsCorrect [
	| url |
	url := (PhDVirtualMachineManager new 
		imageFormatNumber: PhDVirtualMachineManager imageFormatPreSpur;
		imageVersion: '40';
		vmUrl).
	self 
		assert: (self replaceOSByMacIn: url)
		equals: 'https://files.pharo.org/get-files/40/pharo-mac-stable.zip' 
]

{ #category : #'input data' }
PhLVirtualMachineManagerTest >> thirtyTwoBitsHeader [
	" too long to process this request
		^ self getImageHeader: 'http://files.pharo.org/image/60/latest.zip'
	"	
	" Retrieved with:
		'pharo.image' asFileReference binaryReadStream next: 20
	"
	^ #[121 25 0 0 64 0 0 0 8 84 50 2 112 76 76 10 216 156 254 11] readStream "truncated image file"
]
